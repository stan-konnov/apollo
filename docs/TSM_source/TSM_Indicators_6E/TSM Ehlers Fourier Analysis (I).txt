// Ehlers Fourier Analysis
// From TAS&C June 2019
// Copyright 2005-2019 John F Ehlers

	Inputs:	fundamental(20);
	Vars:		bandwidth(0.1), count(0), wave(0), ROC(0),
				G1(0), S1(0), L1(0), BP1(0), Q1(0), P1(0),
				G2(0), S2(0), L2(0), BP2(0), Q2(0), P2(0),
				G3(0), S3(0), L3(0), BP3(0), Q3(0), P3(0);

// compute filter ooefficients once
	if currentbar = 1 then begin
		L1 = cosine(360) / fundamental;
		G1 = cosine(bandwidth*360 / fundamental);
		S1 = 1 / G1 - squareroot(1 / (G1*G1) - 1);
		L2 = cosine(360 / (fundamental / 2));
		G2 = cosine(bandwidth*360 / (fundamental / 2));
		S2 = 1 / G2 - squareroot(1 / (G2*G2) - 1);
		L3 = cosine(360 / (fundamental / 3));
		G3 = cosine(bandwidth*360 / (fundamental / 3));
		S3 = 1 / G3 - squareroot(1 / (G3*G3) - 1);
		end;

// fundamental band-pass
	BP1 = 0.5*(1-S1)*(close - close[2]) + l1*(1 + S1)*BP1[1] - S1*BP1[2];
	if currentbar <= 3 then BP1 = 0;

// fundamental quadrature
	Q1 = (fundamental / 6.28)*(BP1 - BP1[1]);
	if currentbar <= 4 then Q1 = 0;

// second harmonic band-pass
	BP2 = 0.5*(1 - S2)*(close - close[2]) + L2*(1 + S2)*BP2[1] - S2*BP2[2];
	if currentbar <= 3 then BP2 = 0;

// third harmonic band-pass
	BP3 = 0.5*(1 - S3)*(close - close[2]) + L3*(1 + S3)*BP3[1] - S3*BP3[2];
	if currentbar <= 3 then BP3 = 0;

// third harmonic quadrature
	Q3 = (fundamental / 6.28)*(BP3 - BP3[1]);
	if currentbar <= 4 then Q3 = 0;

// sum power of each harmonic at each bar over the fundamental period
	P1 = 0; P2 = 0; P3 = 0;
	for count = 0 to fundamental - 1 begin
		P1 = P1 + BP1[count]*BP1[count] + Q1[count]*Q1[count];
		P2 = P2 + BP2[count]*BP2[count] + Q2[count]*Q2[count];
		P3 = P3 + BP3[count]*BP3[count] + Q3[count]*Q3[count];
		end;

// Add the three harmonics together using their relative amplitudes
	if P1 <> 0 then wave = BP1 + squareroot(P2 / P1)*BP2 + squareroot(P3 / P1)*BP3;

	Plot1(wave);
	plot2(0);

// Optional cycle trading signal
// Rate of change crosses zero at cyclic turning points
	ROC = (fundamental / 12.57)*(wave - wave[2]);
	plot3(ROC);
