generator client {
  provider             = "prisma-client-py"
  interface            = "sync"
  recursive_type_depth = 5
}


datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model backtesting_results {
  id                        String @id @unique @default(uuid())

  // NOTE: we explicitly do not define unique constraints
  // around seemingly unique fields like ticker, frequency, and strategy
  // because we want to allow for multiple backtests of the same strategy
  // on the same ticker at the same frequency, but different backtesting periods

  ticker                    String
  strategy                  String
  frequency                 String
  parameters                Json

  start_date                DateTime?
  end_date                  DateTime?
  max_period                Boolean

  exposure_time             Float
  total_return              Float
  buy_and_hold_return       Float
  annualized_return         Float
  annualized_volatility     Float
  sharpe_ratio              Float
  sortino_ratio             Float
  calmar_ratio              Float
  max_drawdown              Float
  average_drawdown          Float
  max_drawdown_duration     String
  average_drawdown_duration String
  number_of_trades          Int
  win_rate                  Float
  best_trade                Float
  worst_trade               Float
  average_trade             Float
  max_trade_duration        String
  average_trade_duration    String
  system_quality_number     Float

  created_at                DateTime @default(now())
  updated_at                DateTime @updatedAt
}

model positions {
  id                        String @id @unique @default(uuid())

  // At the point of screening,
  // we know ticker and default status
  ticker                    String
  status                    String

  // At the point of dispatching,
  // we know strategy, direction, and target
  strategy                  String?
  direction                 Int?
  target_entry_price        Float?

  // After the opening order is filled
  // we know our entry price and date, and size
  entry_price               Float?
  entry_date                DateTime?
  unit_size                 Float?
  cash_size                 Float?

  // After elapsing one observation period
  // we know our stop loss and take profit
  stop_loss                 Float?
  take_profit               Float?

  // After the closing order is filled
  // we know our exit price and date
  exit_price                Float?
  exit_date                 DateTime?

  // After position is closed,
  // we know our return and PnL
  return_percent            Float?
  profit_and_loss           Float?

  created_at                DateTime @default(now())
  updated_at                DateTime @updatedAt

  // At any point in time,
  // a position for a given ticker
  // should be in one specific status
  @@unique([ticker, status])
}